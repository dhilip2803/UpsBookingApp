@page "/"
@using UPSBookingApp.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@using UpsBookingApp.Client.Models
@inject HttpClient Http
@inject NavigationManager Nav
@inject UserContext UserContext
@rendermode InteractiveWebAssembly

<div class="login-wrapper">
    <div class="login-header">
        <img src="https://ups.scene7.com/is/content/upsprod/Logo" alt="App Logo" class="login-logo" />
        <h1 class="app-title">SpaceBook</h1>
    </div>

    <EditForm EditContext="@editContext" OnValidSubmit="LoginUser" class="login-form">
     

        <div class="form-group">
            <label>User ID</label>
            <InputText class="form-control" @bind-Value="inputUserId" />
        </div>

        <button type="submit" class="btn btn-primary mt-3 w-100">Login</button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger mt-2">@errorMessage</p>
        }
    </EditForm>
</div>

@code {
    private string inputUserId = "";
    private string errorMessage = "";
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(this);
    }

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(inputUserId))
        {
            errorMessage = "Please enter a valid User ID.";
            return;
        }

        try
        {
            var user = await Http.GetFromJsonAsync<User>($"api/BookingApi/validate/{inputUserId}");
            if (user != null)
            {
                UserContext.UserId = user.UserId;
                UserContext.UserName = user.Name;
                UserContext.Role = user.Role;

                Nav.NavigateTo("/desk-booking");
            }
        }
        catch
        {
            errorMessage = "Invalid User ID. Please try again.";
        }
    }
}

@page "/desk-booking"
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@using System.Net.Http.Json
@using UpsBookingApp.Client.Models

<h3>Booking Dashboard</h3>

@if (!string.IsNullOrWhiteSpace(confirmationMessage))
{
    <p style="color: green;"><b>@confirmationMessage</b></p>
}

@if (desks.Any())
{
    <div class="row mb-3">
        <div class="col-md-4">
            <label>Select Floor:</label>
            <select class="form-select" @bind="selectedFloor">
                <option value="">-- Select Floor --</option>
                @foreach (var floor in desks.Select(d => d.Floor).Distinct())
                {
                    <option value="@floor">@floor</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label>Booking Types:</label>
            <select class="form-select" @bind="selectedType">
                <option value="">-- Select type --</option>
                <option value="MeetingRooms">Meeting Room</option>
                <option value="Desks">Desks</option>
                <option value="Equipments">Equipments</option>
            </select>
        </div>
        <div class="col-md-4">
            <label>Filter:</label>
            <select class="form-select" @bind="selectedFilter">
                <option value="All">Show All</option>
                <option value="Available">Show Available</option>
            </select>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-4">
            <label>Select Date:</label>
            <input class="form-control" type="date" @bind="selectedDate" />
        </div>
        <div class="col-md-4">
            <label>Start Time:</label>
            <input class="form-control" type="time" @bind-value="startDateTime" @bind-value:event="oninput" />
        </div>
        <div class="col-md-4">
            <label>End Time:</label>
            <input class="form-control" type="time" @bind-value="endDateTime" @bind-value:event="oninput" />
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-4 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="SearchDesks">Search</button>
        </div>
        @if (selectedType == "MeetingRooms")
        {
        <div class="col-md-4">
            <button class="btn btn-outline-info" @onclick="SuggestDesk">Suggest Desk</button>
        </div>
        }
    </div>

    @if (!string.IsNullOrWhiteSpace(selectedFloor) && selectedType == "MeetingRooms")
    {  

        <div class="row">
            @foreach (var desk in filteredDesks)
            {
                <div class="col-md-4 mb-3">
                    <div class="card p-3">
                        <div class="d-flex justify-content-between align-items-start">
                            <h5>@desk.Name</h5>
                            <button class="btn btn-sm btn-outline-info"
                                    @onclick="() => ToggleInfo(desk.Id)">
                                ℹ️
                            </button>
                        </div>
                        @if (showInfoMap.ContainsKey(desk.Id) && showInfoMap[desk.Id])
                        {
                            <p class="text-muted mt-2">@desk.Description</p>
                        }
                        <p>Location: @desk.Location</p>
                        <p>Capacity: @desk.Capacity</p>
                        <p>Status: <b>@(desk.IsAvailable ? "Available" : "Booked")</b></p>

                        @if (desk.IsAvailable)
                        {
                            <button class="btn btn-primary" @onclick="() => BookDesk(desk)">Book</button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" disabled>Unavailable</button>
                        }
                    </div>
                </div>
            }
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(suggestedDeskMessage))
    {
        <p class="text-success">@suggestedDeskMessage</p>
    }
}
else
{
    <p>Loading desks...</p>
}

@code {
    private List<Desk> desks = new();
    private List<Desk> filteredDesks = new();
    private List<Booking> allBookings = new();
    private List<Booking> myBookings = new();

    private string selectedFloor = "";
    private string selectedType = "";
    private string selectedFilter = "Available";
    private string userName = "Dhilip";

    private DateTime selectedDate = DateTime.Today;
    private DateTime startDateTime = DateTime.Today.AddHours(8);   // 08:00
    private DateTime endDateTime = DateTime.Today.AddHours(17);    // 17:00

    private string? confirmationMessage;
    private string? suggestedDeskMessage;

    private DateTime StartDateTimeCombined => selectedDate.Date + startDateTime.TimeOfDay;
    private DateTime EndDateTimeCombined => selectedDate.Date + endDateTime.TimeOfDay;

    Dictionary<int, bool> showInfoMap = new();

    private void ToggleInfo(int deskId)
    {
        if (showInfoMap.ContainsKey(deskId))
            showInfoMap[deskId] = !showInfoMap[deskId];
        else
            showInfoMap[deskId] = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        desks = await Http.GetFromJsonAsync<List<Desk>>("api/BookingApi/desks") ?? new();
        allBookings = await Http.GetFromJsonAsync<List<Booking>>("api/BookingApi/bookings") ?? new();

        myBookings = allBookings
            .Where(b => b.UserName.Equals(userName, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void FilterDesks()
    {
        var bookingsInSlot = allBookings
            .Where(b => b.StartTime < EndDateTimeCombined && b.EndTime > StartDateTimeCombined)
            .Select(b => b.DeskId)
            .ToHashSet();

        filteredDesks = desks
            .Where(d => d.Floor == selectedFloor)
            .Where(d => selectedFilter == "All" || !bookingsInSlot.Contains(d.Id))
            .Select(d => new Desk
            {
                Id = d.Id,
                Name = d.Name,
                Location = d.Location,
                Description = d.Description,
                Capacity = d.Capacity,
                Floor = d.Floor,
                IsAvailable = !bookingsInSlot.Contains(d.Id)
            }).ToList();
    }

    private void SuggestDesk()
    {
        var suggestion = filteredDesks.FirstOrDefault(d => d.IsAvailable);
        suggestedDeskMessage = suggestion is not null
            ? $"Suggested Desk: {suggestion.Name} at {suggestion.Location}"
            : "No desks available for the selected time.";
    }

    private async Task BookDesk(Desk desk)
    {
        var booking = new Booking
        {
            DeskId = desk.Id,
            UserName = "Dhilip",
            StartTime = StartDateTimeCombined,
            EndTime = EndDateTimeCombined
        };

        var response = await Http.PostAsJsonAsync("api/BookingApi/book", booking);
        confirmationMessage = response.IsSuccessStatusCode ? "✅ Booking successful!" : "❌ Booking failed.";

        await LoadData();
        FilterDesks();
    }

    private async Task CancelDesk(int deskId)
    {
        var response = await Http.PostAsync($"api/BookingApi/cancel/{deskId}", null);
        confirmationMessage = response.IsSuccessStatusCode ? "Booking cancelled." : "❌ Failed to cancel.";

        await LoadData();
        FilterDesks();
    }

    private async Task SearchDesks()
    {
        await LoadData();
        FilterDesks();
    }

    private Task OnTypeChanged(ChangeEventArgs e)
    {
        return Task.CompletedTask;
    }
}

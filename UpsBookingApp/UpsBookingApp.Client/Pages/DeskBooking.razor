@page "/desks"
@rendermode InteractiveWebAssembly
@using UPSBookingApp.Client.Models
@using UpsBookingApp.Client.Models
@inject UPSBookingApp.Client.Services.BookingService BookingService
@implements IDisposable

<h3>Desk Booking System</h3>

@if (!string.IsNullOrWhiteSpace(confirmationMessage))
{
    <p style="color: green;"><b>@confirmationMessage</b></p>
}

<hr />

<h4>Select Floor</h4>
<select @onchange="OnFloorChanged">
    <option value="">-- Select Floor --</option>
    @foreach (var floor in allFloors)
    {
        <option value="@floor">@floor</option>
    }
</select>

<hr />
<h4>📊 Floor Utilization Summary</h4>

@foreach (var floor in allFloors)
{
    var floorDesks = desks?.Where(d => d.Floor == floor).ToList();
    var available = floorDesks?.Count(d => d.IsAvailable);
    var booked = floorDesks?.Count(d => !d.IsAvailable);
    var total = floorDesks?.Count;
    var usage = total > 0 ? (int)((double)booked / total * 100) : 0;

    <div style="border: 1px solid #ccc; padding: 10px; margin-bottom: 15px; border-radius: 6px; background-color: #f9f9f9;">
        <b>📍 @floor</b><br />
        ✅ Available: @available &nbsp;&nbsp;
        ❌ Booked: @booked &nbsp;&nbsp;
        📊 Usage: @usage%
    </div>
}


@if (!string.IsNullOrWhiteSpace(selectedFloor))
{
    <hr />

    <h4>Select User</h4>
    <select @bind="currentUser">
        @foreach (var user in users)
        {
            <option value="@user">@user</option>
        }
    </select>
    <h4>Select Booking Time</h4>
    <label>Start Time:</label>
    <input type="datetime-local" @bind="startTime" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />

    <label style="margin-left: 20px;">End Time:</label>
    <input type="datetime-local" @bind="endTime" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />

    <hr />

    <h4>Desk Layout – @selectedFloor</h4>

    @if (filteredDesks.Any())
    {
        <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px;">
            @foreach (var desk in filteredDesks)
            {
                <div style="
                                border: 2px solid black;
                                padding: 10px;
                                background-color: @(desk.IsAvailable ? "#d4edda" : "#f8d7da");
                                text-align: center;
                                border-radius: 8px;
                                box-shadow: 2px 2px 4px rgba(0,0,0,0.1);
                            ">
                    <b>@desk.Name</b><br />
                    <small>@desk.Location</small><br /><br />
                    @if (desk.IsAvailable)
                    {
                        <button @onclick="() => BookDesk(desk.Id)">Book</button>
                    }
                    else
                    {
                        <button @onclick="() => CancelDesk(desk.Id)">Cancel</button>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <p>No desks found for this floor.</p>
    }

    <hr />

    <h4>Current Bookings</h4>

    @if (allBookings.Any())
    {
        <table style="width: 100%; border-collapse: collapse;">
            <thead>
                <tr style="border-bottom: 1px solid black;">
                    <th style="text-align: left;">Desk</th>
                    <th>User</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in allBookings)
                {
                    var deskName = desks.FirstOrDefault(d => d.Id == booking.DeskId)?.Name ?? "Unknown";
                    <tr>
                        <td>@deskName</td>
                        <td style="@(booking.UserName == currentUser ? "font-weight: bold;" : "")">
                            @booking.UserName
                        </td>
                        <td>@booking.StartTime.ToString("g")</td>
                        <td>@booking.EndTime.ToString("g")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No bookings yet.</p>
    }
}

@code {
    private System.Timers.Timer? refreshTimer;
    List<Desk>? desks;
    List<Booking> allBookings = new();
    List<Desk> filteredDesks = new();
    List<string> allFloors = new();

    string? confirmationMessage;
    string selectedFloor = "";

    DateTime startTime = DateTime.Now;
    DateTime endTime = DateTime.Now.AddHours(2);
    string currentUser = "Dhilip";

    List<string> users = new()
    {
    "Dhilip",
    "Guru",
    "Siva",
    "Admin"
    };

    protected override void OnInitialized()
    {
        refreshTimer = new System.Timers.Timer(15000); // 15 seconds
        refreshTimer.Elapsed += async (sender, e) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Enabled = true;
        desks = BookingService.GetDesks();
        allBookings = BookingService.GetBookings();
        allFloors = desks.Select(d => d.Floor).Distinct().ToList();
    }

    void OnFloorChanged(ChangeEventArgs e)
    {
        selectedFloor = e.Value?.ToString() ?? "";
        filteredDesks = desks.Where(d => d.Floor == selectedFloor).ToList();
    }

    void BookDesk(int deskId)
    {
        if (startTime >= endTime)
        {
            confirmationMessage = "⚠️ End time must be after start time.";
            return;
        }

        var booking = BookingService.BookDesk(
            deskId,
            currentUser, 
            startTime,
            endTime
        );

        if (booking is not null)
        {
            confirmationMessage = $"✅ Booked {desks.First(d => d.Id == deskId).Name} from {booking.StartTime:t} to {booking.EndTime:t}.";
            desks = BookingService.GetDesks();
            filteredDesks = desks.Where(d => d.Floor == selectedFloor).ToList();
            allBookings = BookingService.GetBookings();
        }
    }

    void CancelDesk(int deskId)
    {
        var booking = allBookings.FirstOrDefault(b => b.DeskId == deskId);
        if (booking is null) return;

        if (booking.UserName != currentUser && currentUser != "Admin")
        {
            confirmationMessage = "❌ You can only cancel your own bookings.";
            return;
        }

        BookingService.CancelBooking(deskId);
        confirmationMessage = $"❌ Cancelled booking for {desks.First(d => d.Id == deskId).Name}.";
        desks = BookingService.GetDesks();
        filteredDesks = desks.Where(d => d.Floor == selectedFloor).ToList();
        allBookings = BookingService.GetBookings();
    }
    private async Task RefreshData()
    {
        await InvokeAsync(() =>
        {
            desks = BookingService.GetDesks();
            allBookings = BookingService.GetBookings();
            if (!string.IsNullOrWhiteSpace(selectedFloor))
            {
                filteredDesks = desks.Where(d => d.Floor == selectedFloor).ToList();
            }

            StateHasChanged(); // Refresh the UI
        });
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

}

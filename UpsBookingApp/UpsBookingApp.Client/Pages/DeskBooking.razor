@page "/desk-booking"
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@using System.Net.Http.Json
@using UpsBookingApp.Client.Models


<h3>Desk Booking</h3>

@if (myBookings.Any())
{
    <h4 class="mt-4">My Bookings</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Desk</th>
                <th>Floor</th>
                <th>Start</th>
                <th>End</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in myBookings)
            {
                var desk = desks.FirstOrDefault(d => d.Id == booking.DeskId);
                <tr>
                    <td>@desk?.Name</td>
                    <td>@desk?.Floor</td>
                    <td>@booking.StartTime.ToString("g")</td>
                    <td>@booking.EndTime.ToString("g")</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() => CancelDesk(booking.DeskId)">
                            Cancel
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@if (!string.IsNullOrWhiteSpace(confirmationMessage))
{
    <p style="color: green;"><b>@confirmationMessage</b></p>
}

@if (desks.Any())
{

    <div class="d-flex mb-4" style="gap: 1rem;">
        <div class="flex-fill">
            <label>Select Floor:</label>
            <select @onchange="OnFloorChanged" class="form-select">
                <option value="">-- Select Floor --</option>
                @foreach (var floor in desks.Select(d => d.Floor).Distinct())
                {
                    <option value="@floor">@floor</option>
                }
            </select>
        </div>
        <div class="flex-fill">
            <label>Select Type of Booking:</label>
            <select @onchange="OnTypeChanged" class="form-select">
                <option value="">-- Select Booking Types --</option>
                <option value="MeetingRoom">Meeting Rooms</option>
                <option value="Desk">Desks</option>
                <option value="Lab">Labs</option>
            </select>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(selectedFloor))
    {
        <button class="btn btn-outline-info mb-2" @onclick="SuggestDesk">Suggest Desk</button>
        <div class="row">
            @foreach (var desk in filteredDesks)
            {
                <div class="col-md-4 mb-3">
                    <div class="card p-3">
                        <h5>@desk.Name</h5>
                        <p>Location: @desk.Location</p>
                        <p>Status: <b>@(desk.IsAvailable ? "Available" : "Booked")</b></p>

                        @if (desk.IsAvailable)
                        {
                            <div class="mb-2">
                                <input class="form-control mb-1" placeholder="Your Name" @bind="userName" />
                                <input class="form-control mb-1" type="datetime-local" @bind="startTime" />
                                <input class="form-control mb-1" type="datetime-local" @bind="endTime" />
                                <button class="btn btn-primary" @onclick="() => BookDesk(desk)">Book</button>
                            </div>
                        }
                        else
                        {
                            <button class="btn btn-danger" @onclick="() => CancelDesk(desk.Id)">Cancel</button>
                        }
                    </div>
                </div>
            }
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(suggestedDeskMessage))
    {
        <p class="text-success">@suggestedDeskMessage</p>
    }

    @if (allBookings?.Any() == true)
    {
        <h4>Current Bookings</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Desk</th>
                    <th>User</th>
                    <th>Start</th>
                    <th>End</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in allBookings)
                {
                    var desk = desks.FirstOrDefault(d => d.Id == booking.DeskId);
                    <tr>
                        <td>@desk?.Name</td>
                        <td>@booking.UserName</td>
                        <td>@booking.StartTime.ToString("g")</td>
                        <td>@booking.EndTime.ToString("g")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <p>Loading desks...</p>
}

@code {
    private List<Desk> desks = new();
    private List<Desk> filteredDesks = new();
    private List<Booking> allBookings = new();

    private string selectedFloor = "";
    private string userName = "";
    private DateTime startTime = DateTime.Now;
    private DateTime endTime = DateTime.Now.AddHours(1);
    private string? confirmationMessage;
    private List<Booking> myBookings = new();
    private string? suggestedDeskMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        desks = await Http.GetFromJsonAsync<List<Desk>>("api/BookingApi/desks") ?? new();
        allBookings = await Http.GetFromJsonAsync<List<Booking>>("api/BookingApi/bookings") ?? new();

        myBookings = allBookings
            .Where(b => b.UserName.Equals(userName, StringComparison.OrdinalIgnoreCase))
            .ToList();

        FilterDesksByFloor();
    }


    private void FilterDesksByFloor()
    {
        filteredDesks = string.IsNullOrEmpty(selectedFloor)
            ? new List<Desk>()
            : desks.Where(d => d.Floor == selectedFloor).ToList();
    }

    private async Task BookDesk(Desk desk)
    {
        var booking = new Booking
        {
            DeskId = desk.Id,
            UserName = userName,
            StartTime = startTime,
            EndTime = endTime
        };

        var response = await Http.PostAsJsonAsync("api/BookingApi/book", booking);
        confirmationMessage = response.IsSuccessStatusCode ? "Booking successful!" : "❌ Booking failed.";

        await LoadData();
    }

    private async Task CancelDesk(int deskId)
    {
        var response = await Http.PostAsync($"api/BookingApi/cancel/{deskId}", null);
        confirmationMessage = response.IsSuccessStatusCode ? "Booking cancelled." : "❌ Failed to cancel.";

        await LoadData();
    }

    private async Task OnFloorChanged(ChangeEventArgs e)
    {
        selectedFloor = e.Value?.ToString() ?? "";
        FilterDesksByFloor();
        await Task.CompletedTask;
    }
    private async Task OnTypeChanged(ChangeEventArgs e)
    {

    }
    private void SuggestDesk()
    {
        var suggested = desks
            .Where(d => d.Floor == selectedFloor && d.IsAvailable)
            .OrderBy(d => d.Name)
            .FirstOrDefault();

        suggestedDeskMessage = suggested is not null
            ? $"Suggested desk: {suggested.Name} at {suggested.Location}"
            : "No desks available on selected floor";
    }

}

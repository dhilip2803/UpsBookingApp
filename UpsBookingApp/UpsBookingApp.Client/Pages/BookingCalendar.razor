@page "/booking-calendar"
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@using System.Net.Http.Json
@using UpsBookingApp.Client.Models
@using UPSBookingApp.Client.Services
@inject UserContext UserContext

<h3>Booking Summary</h3>

<div class="btn-group mb-3">
    <button class="btn @(activeType == "MeetingRooms" ? "btn-secondary" : "btn-outline-secondary")"
            @onclick="@(() => activeType = "MeetingRooms")">
        Meeting Room
    </button>
    <button class="btn @(activeType == "Desks" ? "btn-primary" : "btn-outline-primary")"
            @onclick="@(() => activeType = "Desks")">
        Desk
    </button>
</div>
@if (activeType == "MeetingRooms")
{
@if (groupedBookings?.Any() == true)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Meeting Room</th>
                <th>Booking Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var deskGroup in groupedBookings)
            {
                <tr>
                    <td><b>@deskGroup.Key</b></td>
                    <td>
                        @foreach (var booking in deskGroup.Value)
                        {
                            <span class="badge bg-primary me-1">
                                    @booking.UserName: @booking.StartTime.ToString("dd MMM yyyy, hh:mm tt") - @booking.EndTime.ToString("dd MMM yyyy, hh:mm tt")
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

else
{
    <p>No Bookings at the moment</p>
}
}

@if (activeType == "Desks")
{
    @if (deskBookings?.Any() == true)
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Desk</th>
                    <th>Booking Details</th>
                </tr>
            </thead>
        
        <tbody>
            @foreach (var deskGroup in deskBookings)
            {
                <tr>
                        <td>
                            <b> 
                                @foreach (var booking in deskGroup.Value)
                                {
                                    @($"Seat {booking.DeskId}")
                                }
                            </b>
                        </td>
                    <td>
                        @foreach (var booking in deskGroup.Value)
                        {
                            <span class="badge bg-primary me-1">
                                @booking.UserName: @booking.StartTime.ToString("dd MMM yyyy, hh:mm tt") - @booking.EndTime.ToString("dd MMM yyyy, hh:mm tt")
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
        </table>
    }
}
@code {
    private Dictionary<string, List<Booking>> groupedBookings = new();
    private Dictionary<string, List<Booking>> deskBookings = new();
    private List<Booking> myBookings = new();
    private List<Desk> desks = new();
    private List<Booking> allBookings = new();
    private string activeType = "MeetingRooms";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        var bookings = await Http.GetFromJsonAsync<List<Booking>>("api/BookingApi/bookings") ?? new();
        var desks = await Http.GetFromJsonAsync<List<Desk>>("api/BookingApi/desks") ?? new();

        var today = DateTime.Today;
        var todayBookings = bookings
            .Where(b => b.StartTime.Date == today)
            .ToList();

        groupedBookings = todayBookings
            .Where(b => b.BookingType == "MeetingRoom")
            .GroupBy(b => desks.FirstOrDefault(d => d.Id == b.DeskId)?.Name ?? $"Desk {b.DeskId}")
            .ToDictionary(g => g.Key, g => g.OrderBy(b => b.StartTime).ToList());
        deskBookings = todayBookings
            .Where(b => b.BookingType == "Workspace")
            .GroupBy(b => desks.FirstOrDefault(d => d.Id == b.DeskId)?.Name ?? $"Desk {b.DeskId}")
            .ToDictionary(g => g.Key, g => g.OrderBy(b => b.StartTime).ToList());
    }
    private async Task LoadData()
    {
        desks = await Http.GetFromJsonAsync<List<Desk>>("api/BookingApi/desks") ?? new();
        allBookings = await Http.GetFromJsonAsync<List<Booking>>("api/BookingApi/bookings") ?? new();

        myBookings = allBookings
            .Where(b => b.UserName.Equals(UserContext.UserName, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
}

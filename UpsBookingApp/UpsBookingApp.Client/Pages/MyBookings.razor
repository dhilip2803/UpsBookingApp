@page "/my-bookings"
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@using System.Net.Http.Json
@using UpsBookingApp.Client.Models
@using UPSBookingApp.Client.Services
@inject UserContext UserContext

<h4 class="mt-4">My Bookings</h4>
<table class="table">
    <thead>
        <tr>
            <th>Meeting Room/Desk</th>
            <th>Floor</th>
            <th>Start</th>
            <th>End</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var booking in myBookings)
        {
            string? name = null;
            string? floor = null;

            if (booking.BookingType == "Workspace")
            {
                var workspace = workspaces.FirstOrDefault(w => w.Id == booking.DeskId);
                name = $"Seat {workspace?.SeatNumber}";
                floor = workspace?.Floor;
            }
            else
            {
                var desk = desks.FirstOrDefault(d => d.Id == booking.DeskId);
                name = desk?.Name;
                floor = desk?.Floor;
            }

            <tr>
                <td>@name</td>
                <td>@floor</td>
                <td>@booking.StartTime.ToString("g")</td>
                <td>@booking.EndTime.ToString("g")</td>
                <td>
                    <button class="btn btn-sm btn-danger" @onclick="() => CancelDesk(booking.DeskId)">
                        Cancel
                    </button>
                </td>
            </tr>
        }

    </tbody>
</table>

@code {
    private List<Booking> myBookings = new();
    private List<Desk> desks = new();
    private List<Workspace> workspaces = new();
    private List<Desk> filteredDesks = new();
    private List<Booking> allBookings = new();
    private string? confirmationMessage;
    private DateTime startTime = DateTime.Now;
    private DateTime endTime = DateTime.Now.AddHours(1);
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        desks = await Http.GetFromJsonAsync<List<Desk>>("api/BookingApi/desks") ?? new();
        workspaces = await Http.GetFromJsonAsync<List<Workspace>>("api/Workspace/all") ?? new();
        allBookings = await Http.GetFromJsonAsync<List<Booking>>("api/BookingApi/bookings") ?? new();

        myBookings = allBookings
            .Where(b => b.UserName.Equals(UserContext.UserName, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    private async Task CancelDesk(int deskId)
    {
        var response = await Http.PostAsync($"api/BookingApi/cancel/{deskId}", null);
        confirmationMessage = response.IsSuccessStatusCode ? "Booking cancelled." : "❌ Failed to cancel.";

        await LoadData();
    }
}

@page "/seatmap"
@inject HttpClient Http
@inject UserContext UserContext
@using UPSBookingApp.Client.Services
@using UpsBookingApp.Client.Models

<h3>Workspace Layout</h3>

@if (Workspaces.Count == 0)
{
    <p>Loading...</p>
}
else
{


    <div class="seat-grid">
        @foreach (var workspace in FilteredWorkspaces)
        {
            <button class="seat-btn"
                    style="background-color:@(IsBooked(workspace.Id) ? "#F44336" : "#4CAF50");"
                    @onclick="() => OnSeatClick(workspace)">
                @workspace.SeatNumber
            </button>
        }
    </div>
}

@if (ShowPanel)
{
    <div class="side-panel">
        <h5>Seat @SelectedSeat?.SeatNumber - @SelectedSeat?.Floor</h5>
        @if (SelectedBooking is not null)
        {
            <p><b>Booked By:</b> @SelectedBooking.UserName</p>
            <p><b>From:</b> @SelectedBooking.StartTime</p>
            <p><b>To:</b> @SelectedBooking.EndTime</p>
        }
        else
        {
            <p>This seat is available</p>
            <button class="btn btn-primary w-100" @onclick="BookSelectedSeat">Book</button>
        }
        <button class="btn btn-secondary w-100 mt-3" @onclick="() => ShowPanel = false">Close</button>
    </div>
}

@code {
    [Parameter] public DateTime StartTime { get; set; }
    [Parameter] public DateTime EndTime { get; set; }
    [Parameter] public List<Booking> AllBookings { get; set; } = new();
    [Parameter] public string Floor { get; set; }

    private List<Workspace> Workspaces = new();
    private List<Workspace> FilteredWorkspaces = new();
    private string SelectedFloor = "";
    private Workspace? SelectedSeat;
    private Booking? SelectedBooking;
    private bool ShowPanel = false;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Floor))
        {
            FilteredWorkspaces = new(); // Clear list if no floor selected
            return;
        }

        // Only fetch once and cache if needed
        if (Workspaces.Count == 0)
        {
            Workspaces = await Http.GetFromJsonAsync<List<Workspace>>("api/Workspace/all") ?? new();
        }

        FilteredWorkspaces = Workspaces
            .Where(w => w.Floor.Equals(Floor, StringComparison.OrdinalIgnoreCase))
            .OrderBy(w => w.SeatNumber)
            .ToList();
    }

    private bool IsBooked(int seatId)
    {
        return AllBookings.Any(b =>
            b.DeskId == seatId &&
            b.StartTime < EndTime &&
            b.EndTime > StartTime);
    }

    private void OnSeatClick(Workspace seat)
    {
        SelectedSeat = seat;
        SelectedBooking = AllBookings.FirstOrDefault(b =>
            b.DeskId == seat.Id &&
            b.StartTime < EndTime &&
            b.EndTime > StartTime);
        ShowPanel = true;
    }

    private async Task BookSelectedSeat()
    {
        if (SelectedSeat is null) return;

        var booking = new Booking
        {
            DeskId = SelectedSeat.Id,
            UserName = UserContext.UserName,
            StartTime = StartTime,
            EndTime = EndTime,
            BookingType = "Workspace"
        };

        var response = await Http.PostAsJsonAsync("api/Workspace/book", booking);
        if (response.IsSuccessStatusCode)
        {
            AllBookings.Add(booking);
            ShowPanel = false;
        }
    }
}

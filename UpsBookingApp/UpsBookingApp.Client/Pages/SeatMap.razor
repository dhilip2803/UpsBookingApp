@page "/seatmap"
@using UpsBookingApp.Client.Models
@rendermode InteractiveWebAssembly

<h3>Workspace Seat Map</h3>

<div style="position:relative; width:650px; height:700px;">
    @foreach (var workspace in Workspaces)
    {
        var (centerX, centerY) = GetTableCenter(workspace.TableNumber);
        if (workspace.SeatNumber == 0)
        {
            <!-- Oval Table -->
            <div style="
                                position:absolute;
                                left:@(centerX - 45)px;
                                top:@(centerY - 15)px;
                                width:120px;
                                height:60px;
                                border-radius:60px/30px;
                                background:#eee;
                                border:2px solid #bbb;
                                z-index:0;">
            </div>
        }

        <!-- Seats -->
        <button style="
                    position:absolute;
                    width:32px; height:32px;
                    border-radius:50%;
                    border:1px solid #888;
                    background:@GetSeatColor(workspace.Status);
                    transform:@GetSeatTransform(workspace.TableNumber, workspace.SeatNumber);
                    cursor:pointer;
                    transition:background 0.2s;
                    z-index:1;"
                @onclick="() => ToggleSeat(workspace)">
            @workspace.Id
        </button>
    }
</div>

<!-- Legend -->
<div class="mt-3">
    <span style="display:inline-block;width:20px;height:20px;background:#4CAF50;border-radius:50%;margin-right:5px;"></span> Available
    <span style="display:inline-block;width:20px;height:20px;background:#2196F3;border-radius:50%;margin:0 5px 0 15px;"></span> Selected
    <span style="display:inline-block;width:20px;height:20px;background:#F44336;border-radius:50%;margin:0 5px 0 15px;"></span> Reserved
</div>

@code {
    private const int Tables = 9;
    private const int SeatsPerTable = 10;
    private const int TablesPerColumn = 3;

    private readonly List<Workspace> Workspaces = new();

    protected override void OnInitialized()
    {
        int id = 1;
        for (int t = 0; t < Tables; t++)
        {
            for (int s = 0; s < SeatsPerTable; s++)
            {
                Workspaces.Add(new Workspace
                {
                    Id = id++,
                    TableNumber = t,
                    SeatNumber = s,
                    Status = WorkspaceStatus.Available
                });
            }
        }
    }

    private void ToggleSeat(Workspace workspace)
    {
        workspace.Status = workspace.Status switch
        {
            WorkspaceStatus.Available => WorkspaceStatus.Selected,
            WorkspaceStatus.Selected => WorkspaceStatus.Reserved,
            WorkspaceStatus.Reserved => WorkspaceStatus.Available,
            _ => WorkspaceStatus.Available
        };
    }

    private string GetSeatColor(WorkspaceStatus status) => status switch
    {
        WorkspaceStatus.Available => "#4CAF50", // green
        WorkspaceStatus.Selected => "#2196F3",  // blue
        WorkspaceStatus.Reserved => "#F44336",  // red
        _ => "#CCCCCC"
    };

    private (double x, double y) GetTableCenter(int table)
    {
        double[] columnX = { 150, 500, 850 };
        double yStart = 70;
        double ySpacing = 200;

        int col = table / TablesPerColumn;
        int row = table % TablesPerColumn;

        double x = columnX[col];
        double y = yStart + row * ySpacing;
        return (x, y);
    }

    private string GetSeatTransform(int table, int seat)
    {
        var (centerX, centerY) = GetTableCenter(table);
        double ovalA = 60;
        double ovalB = 30;

        double distanceFromOval = 38;
        double a = ovalA + distanceFromOval;
        double b = ovalB + distanceFromOval;

        double angle = 360.0 * seat / SeatsPerTable;
        double rad = angle * Math.PI / 180.0;
        double x = centerX + a * Math.Cos(rad);
        double y = centerY + b * Math.Sin(rad);

        return $"translate({x}px, {y}px)";
    }
}

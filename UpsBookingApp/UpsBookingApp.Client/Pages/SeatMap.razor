@page "/seatmap"
@using UpsBookingApp.Client.Models
@rendermode InteractiveWebAssembly
@using UPSBookingApp.Client.Services
@inject HttpClient Http
@inject UserContext UserContext

<h4>Workspace Seat Map</h4>

<div style="position:relative; width:650px; height:700px;">
    @foreach (var workspace in Workspaces)
    {
        var (centerX, centerY) = GetTableCenter(workspace.TableNumber);

        if (workspace.SeatNumber == 0)
        {
            <!-- Oval Table -->
            <div style="
                position:absolute;
                left:@(centerX - 45)px;
                top:@(centerY - 15)px;
                width:120px;
                height:60px;
                border-radius:60px/30px;
                background:#eee;
                border:2px solid #bbb;
                z-index:0;">
            </div>
        }

        <!-- Seats -->
        <button style="
            position:absolute;
            width:32px; height:32px;
            border-radius:50%;
            border:1px solid #888;
            background:@(IsBooked(workspace.Id) ? "#F44336" : "#4CAF50");
            transform:@GetSeatTransform(workspace.TableNumber, workspace.SeatNumber);
            cursor:pointer;
            z-index:1;"
            @onclick="() => OnSeatClick(workspace)">
            @workspace.SeatNumber
        </button>
    }
</div>

<!-- Legend -->
<div class="mt-3">
    <span style="display:inline-block;width:20px;height:20px;background:#4CAF50;border-radius:50%;margin-right:5px;"></span> Available
    <span style="display:inline-block;width:20px;height:20px;background:#F44336;border-radius:50%;margin:0 5px 0 15px;"></span> Booked
</div>

<!-- Slide Panel -->
@if (ShowPanel)
{
    <div style="position:fixed; top:0; right:0; width:300px; height:100%; background:#fff; border-left:1px solid #ccc; padding:20px; box-shadow:-2px 0 5px rgba(0,0,0,0.2); z-index:100;">
        <h5>Seat: @SelectedSeat?.SeatNumber (Table @SelectedSeat?.TableNumber)</h5>

        @if (SelectedBooking is not null)
        {
            <p><b>Booked by:</b> @SelectedBooking.UserName</p>
            <p><b>From:</b> @SelectedBooking.StartTime.ToString("g")</p>
            <p><b>To:</b> @SelectedBooking.EndTime.ToString("g")</p>
        }
        else
        {
            <p>This seat is available</p>

            <button class="btn btn-primary w-100" @onclick="BookSelectedSeat">Book Now</button>
        }

        <button class="btn btn-secondary w-100 mt-3" @onclick="() => ShowPanel = false">Close</button>
    </div>
}
@code {
    [Parameter] public string Floor { get; set; } = string.Empty;
    [Parameter] public DateTime StartTime { get; set; }
    [Parameter] public DateTime EndTime { get; set; }
    [Parameter] public List<Booking> AllBookings { get; set; } = new();
    [Parameter] public string UserName { get; set; } = string.Empty;

    private const int Tables = 9;
    private const int SeatsPerTable = 10;
    private const int TablesPerColumn = 3;

    private List<Workspace> Workspaces = new();
    private Workspace? SelectedSeat;
    private Booking? SelectedBooking;
    private bool ShowPanel = false;

    private DateTime BookingStart = DateTime.Now;
    private DateTime BookingEnd = DateTime.Now.AddHours(1);

    protected override void OnInitialized()
    {
        int id = 1;
        for (int t = 0; t < Tables; t++)
        {
            for (int s = 0; s < SeatsPerTable; s++)
            {
                Workspaces.Add(new Workspace
                {
                    Id = id++,
                    TableNumber = t,
                    SeatNumber = s
                });
            }
        }
    }

    private bool IsBooked(int workspaceId)
    {
        return AllBookings.Any(b =>
            b.DeskId == workspaceId &&
            b.StartTime < EndTime &&
            b.EndTime > StartTime);
    }

    private void OnSeatClick(Workspace workspace)
    {
        SelectedSeat = workspace;

        SelectedBooking = AllBookings.FirstOrDefault(b =>
            b.DeskId == workspace.Id &&
            b.StartTime < EndTime &&
            b.EndTime > StartTime);

        ShowPanel = true;
    }

private async Task BookSelectedSeat()
{
    if (SelectedSeat == null) return;

    var booking = new Booking
    {
        DeskId = SelectedSeat.Id,
        UserName = UserContext.UserName,
        StartTime = BookingStart,
        EndTime = BookingEnd,
        BookingType = "Workspace"
    };

    var response = await Http.PostAsJsonAsync("api/BookingApi/workspace/book", booking);

    if (response.IsSuccessStatusCode)
    {
        AllBookings.Add(booking);
        ShowPanel = false;
    }
    else
    {
        var error = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"❌ Booking failed: {error}");
    }
}

    private (double x, double y) GetTableCenter(int table)
    {
        double[] columnX = { 150, 500, 850 };
        double yStart = 70;
        double ySpacing = 200;

        int col = table / TablesPerColumn;
        int row = table % TablesPerColumn;

        double x = columnX[col];
        double y = yStart + row * ySpacing;
        return (x, y);
    }

    private string GetSeatTransform(int table, int seat)
    {
        var (centerX, centerY) = GetTableCenter(table);
        double ovalA = 60;
        double ovalB = 30;
        double dist = 38;

        double a = ovalA + dist;
        double b = ovalB + dist;

        double angle = 360.0 * seat / SeatsPerTable;
        double rad = angle * Math.PI / 180.0;
        double x = centerX + a * Math.Cos(rad);
        double y = centerY + b * Math.Sin(rad);

        return $"translate({x}px, {y}px)";
    }

}
